"""This module was auto-generated by datajoint from an existing schema"""


import datajoint as dj

schema=dj.schema('microns_ta3')


vmodule0 = dj.create_virtual_module('vmodule0', 'microns_nda')


@schema
class Segmentation(dj.Manual):
    definition = """
    # Segmentation iteration or snapshot
    segmentation         : smallint                     # segmentation id
    ---
    segmentation_description : varchar(4000)                # free text description of the segmentation
    """


@schema
class Synapse(dj.Manual):
    definition = """
    # Anatomically localized synapse between two Segments
    -> Segmentation
    synapse_id           : bigint                       # synapse index within the segmentation
    ---
    (presyn) -> Segment(segment_id)
    (postsyn) -> Segment
    synapse_x            : bigint                       # (EM voxels)
    synapse_y            : bigint                       # (EM voxels)
    synapse_z            : bigint                       # (EM voxels)
    syn_bbox_x1          : bigint                       # (EM voxels)  - bounding box
    syn_bbox_y1          : bigint                       # (EM voxels)  - bounding box
    syn_bbox_z1          : bigint                       # (EM voxels)  - bounding box
    syn_bbox_x2          : bigint                       # (EM voxels)  - bounding box
    syn_bbox_y2          : bigint                       # (EM voxels)  - bounding box
    syn_bbox_z2          : bigint                       # (EM voxels)  - bounding box
    """


@schema
class Segment(dj.Manual):
    definition = """
    # Segment: a volumetric segmented object
    -> Segmentation
    segment_id           : bigint                       # segment id unique within each Segmentation
    ---
    prev_segment_id=null : bigint                       # segment id in previous Segmentation version
    """


@schema
class Soma(dj.Manual):
    definition = """
    # A segment including a cell soma
    -> Segment
    -> vmodule0.EMCell
    """


@schema
class SomaSkeleton(dj.Manual):
    definition = """
    #
    -> Soma
    ---
    root=null            : blob                         # (um) coordinates of the root node
    nodes                : longblob                     # (um) coordinates of nodes
    edges                : longblob                     # between nodes
    radii                : longblob                     # (um) approximation of segments
    """


@schema
class PostSynapticPairInput(dj.Manual):
    definition = """
    #
    -> Soma
    segment_b            : bigint                       # segment id unique within each Segmentation
    em_id_b              : smallint                     # mask ID
    ---
    n_syn_a              : int                          # number of synapses for cell A
    n_syn_b              : int                          # number of synapses for cell B
    n_syn_union          : int                          # number of unique synapses for both
    n_syn_shared         : int                          # number of shared synapses
    n_seg_a              : int                          # number of segments for cell A
    n_seg_b              : int                          # number of segments for cell B
    n_seg_union          : int                          # number of unique segments for both
    n_seg_shared         : int                          # number of shared segments
    """


@schema
class Neurite(dj.Manual):
    definition = """
    #
    -> Segment
    ---
    neurite_type         : enum('axon','dendrite')      #
    """


@schema
class NeuriteSkeleton(dj.Manual):
    definition = """
    #
    -> Neurite
    ---
    nroots               : int                          # number of roots
    root=null            : blob                         # (um) coordinates of the root node
    nodes                : longblob                     # (um) coordinates of nodes
    edges                : longblob                     # between nodes
    radii                : longblob                     # (um) approximation of segments
    """


@schema
class Mesh(dj.Imported):
    definition = """
    #
    -> Segment
    """


    class Fragment(dj.Part):
        definition = """
        # Mesh Fragment
        -> Mesh
        fragment             : smallint                     # fragment in mesh
        ---
        bound_x_min          : int                          #
        bound_x_max          : int                          #
        bound_y_min          : int                          #
        bound_y_max          : int                          #
        bound_z_min          : int                          #
        bound_z_max          : int                          #
        n_vertices           : int                          # number of vertices in this mesh
        n_triangles          : int                          # number of triangles in this mesh
        vertices             : longblob                     # x,y,z coordinates of vertices
        triangles            : longblob                     # triangles (triplets of vertices)
        """


@schema
class AnnotationLookup(dj.Lookup):
    definition = """
    # list of possible annotations
    annotation           : varchar(255)                 #
    """


@schema
class Proofreader(dj.Lookup):
    definition = """
    # EM Segmentation proofreaders
    proofreader          : varchar(8)                   # short name
    """


@schema
class SynapseProofread(dj.Manual):
    definition = """
    #
    -> Synapse
    proofread_timestamp=CURRENT_TIMESTAMP : timestamp                    #
    ---
    -> Proofreader
    verdict              : enum('valid','deprecated','ambiguous') #
    proofread_comment="" : varchar(4000)                #
    """


@schema
class Proofread(dj.Manual):
    definition = """
    #
    -> Segment
    proofread_timestamp=CURRENT_TIMESTAMP : timestamp                    #
    ---
    -> Proofreader
    verdict              : enum('valid','deprecated','ambiguous') #
    proofread_comment="" : varchar(4000)                #
    """


@schema
class Annotation(dj.Manual):
    definition = """
    #
    -> Segment
    annotation_timestamp=CURRENT_TIMESTAMP : timestamp                    #
    ---
    -> Proofreader
    -> AnnotationLookup
    annotation_comment   : varchar(4000)                #
    """


@schema
class ContactIngest(dj.Manual):
    definition = """
    # Ingest without constraints
    segmentation         : smallint                     #
    seg1                 : bigint                       #
    seg2                 : bigint                       #
    contact_num          : smallint                     # contact number between given segments
    ---
    x_faces              : int                          # voxel faces on x
    y_faces              : int                          # voxel faces
    z_faces              : int                          # voxel faces
    contact_x            : double                       # centroid location x
    contact_y            : double                       # centroid location y
    contact_z            : double                       # centroid location z
    con_bbox_x1          : bigint                       # bounding box corner 1 x
    con_bbox_y1          : bigint                       # bounding box corner 1 y
    con_bbox_z1          : bigint                       # bounding box corner 1 z
    con_bbox_x2          : bigint                       # bounding box corner 2 x
    con_bbox_y2          : bigint                       # bounding box corner 2 y
    con_bbox_z2          : bigint                       # bounding box corner 2 z
    """


@schema
class Contact(dj.Manual):
    definition = """
    # Contact (within 40 nm) between segment surfaces
    (seg1) -> Segment(segment_id)
    (seg2) -> Segment
    contact_num          : smallint                     # contact number between given segments
    ---
    x_faces              : int                          # voxel faces on x
    y_faces              : int                          # voxel faces
    z_faces              : int                          # voxel faces
    contact_x            : double                       # centroid location x
    contact_y            : double                       # centroid location y
    contact_z            : double                       # centroid location z
    con_bbox_x1          : bigint                       # bounding box corner 1 x
    con_bbox_y1          : bigint                       # bounding box corner 1 y
    con_bbox_z1          : bigint                       # bounding box corner 1 z
    con_bbox_x2          : bigint                       # bounding box corner 2 x
    con_bbox_y2          : bigint                       # bounding box corner 2 y
    con_bbox_z2          : bigint                       # bounding box corner 2 z
    """


@schema
class SynapseAnnotationLookup(dj.Lookup):
    definition = """
    # list of possible annotations
    annotation           : varchar(255)                 #
    """


@schema
class SynapseAnnotation(dj.Manual):
    definition = """
    #
    -> Synapse
    annotation_timestamp=CURRENT_TIMESTAMP : timestamp                    #
    ---
    -> Proofreader
    -> SynapseAnnotationLookup
    annotation_comment   : varchar(4000)                #
    """


@schema
class CellClass(dj.Lookup):
    definition = """
    #
    cell_class           : char(24)                     # cell class
    """


@schema
class AllenCellType(dj.Manual):
    definition = """
    #
    -> Segment
    ---
    -> CellClass
    neuroglancer=null    : varchar(1024)                # neuroglancer URL
    """
